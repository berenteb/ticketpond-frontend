/* tslint:disable */
/* eslint-disable */
/**
 * Ticketpond Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddToCartDto
 */
export interface AddToCartDto {
    /**
     * 
     * @type {string}
     * @memberof AddToCartDto
     */
    'ticketId': string;
    /**
     * 
     * @type {number}
     * @memberof AddToCartDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CartDto
 */
export interface CartDto {
    /**
     * 
     * @type {string}
     * @memberof CartDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CartDto
     */
    'customerId': string;
    /**
     * 
     * @type {Array<CartItemDto>}
     * @memberof CartDto
     */
    'items': Array<CartItemDto>;
}
/**
 * 
 * @export
 * @interface CartItemDto
 */
export interface CartItemDto {
    /**
     * 
     * @type {string}
     * @memberof CartItemDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CartItemDto
     */
    'cartId': string;
    /**
     * 
     * @type {string}
     * @memberof CartItemDto
     */
    'ticketId': string;
    /**
     * 
     * @type {DeepTicketDto}
     * @memberof CartItemDto
     */
    'ticket': DeepTicketDto;
}
/**
 * 
 * @export
 * @interface CreateCustomerDto
 */
export interface CreateCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface CreateExperienceDto
 */
export interface CreateExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'endDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'bannerImage': string;
}
/**
 * 
 * @export
 * @interface CreateMerchantDto
 */
export interface CreateMerchantDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMerchantDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface CreateTicketDto
 */
export interface CreateTicketDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTicketDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'validFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'validTo': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'experienceId': string;
}
/**
 * 
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'authId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface DeepExperienceDto
 */
export interface DeepExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'merchantId': string;
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'endDate': string;
    /**
     * 
     * @type {string}
     * @memberof DeepExperienceDto
     */
    'bannerImage': string;
    /**
     * 
     * @type {MerchantDto}
     * @memberof DeepExperienceDto
     */
    'merchant': MerchantDto;
    /**
     * 
     * @type {Array<TicketDto>}
     * @memberof DeepExperienceDto
     */
    'tickets': Array<TicketDto>;
}
/**
 * 
 * @export
 * @interface DeepOrderDto
 */
export interface DeepOrderDto {
    /**
     * 
     * @type {string}
     * @memberof DeepOrderDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderDto
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderDto
     */
    'createdAt': string;
    /**
     * 
     * @type {Array<DeepOrderItemDto>}
     * @memberof DeepOrderDto
     */
    'items': Array<DeepOrderItemDto>;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderDto
     */
    'paymentStatus': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderDto
     */
    'orderStatus': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderDto
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface DeepOrderItemDto
 */
export interface DeepOrderItemDto {
    /**
     * 
     * @type {string}
     * @memberof DeepOrderItemDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderItemDto
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof DeepOrderItemDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderItemDto
     */
    'serialNumber': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderItemDto
     */
    'ticketId': string;
    /**
     * 
     * @type {DeepTicketDto}
     * @memberof DeepOrderItemDto
     */
    'ticket': DeepTicketDto;
}
/**
 * 
 * @export
 * @interface DeepOrderWithCustomerDto
 */
export interface DeepOrderWithCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof DeepOrderWithCustomerDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderWithCustomerDto
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderWithCustomerDto
     */
    'createdAt': string;
    /**
     * 
     * @type {Array<DeepOrderItemDto>}
     * @memberof DeepOrderWithCustomerDto
     */
    'items': Array<DeepOrderItemDto>;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderWithCustomerDto
     */
    'paymentStatus': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderWithCustomerDto
     */
    'orderStatus': string;
    /**
     * 
     * @type {string}
     * @memberof DeepOrderWithCustomerDto
     */
    'serialNumber': string;
    /**
     * 
     * @type {CustomerDto}
     * @memberof DeepOrderWithCustomerDto
     */
    'customer': CustomerDto;
}
/**
 * 
 * @export
 * @interface DeepTicketDto
 */
export interface DeepTicketDto {
    /**
     * 
     * @type {string}
     * @memberof DeepTicketDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeepTicketDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeepTicketDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof DeepTicketDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof DeepTicketDto
     */
    'validFrom': string;
    /**
     * 
     * @type {string}
     * @memberof DeepTicketDto
     */
    'validTo': string;
    /**
     * 
     * @type {string}
     * @memberof DeepTicketDto
     */
    'experienceId': string;
    /**
     * 
     * @type {ExperienceDto}
     * @memberof DeepTicketDto
     */
    'experience': ExperienceDto;
}
/**
 * 
 * @export
 * @interface ExperienceDto
 */
export interface ExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'merchantId': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'endDate': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'bannerImage': string;
}
/**
 * 
 * @export
 * @interface MerchantDto
 */
export interface MerchantDto {
    /**
     * 
     * @type {string}
     * @memberof MerchantDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof MerchantDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'createdAt': string;
    /**
     * 
     * @type {Array<OrderItemDto>}
     * @memberof OrderDto
     */
    'items': Array<OrderItemDto>;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'paymentStatus': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'orderStatus': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface OrderItemDto
 */
export interface OrderItemDto {
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'serialNumber': string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    'ticketId': string;
}
/**
 * 
 * @export
 * @interface OrderWithCustomerDto
 */
export interface OrderWithCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof OrderWithCustomerDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithCustomerDto
     */
    'customerId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithCustomerDto
     */
    'createdAt': string;
    /**
     * 
     * @type {Array<OrderItemDto>}
     * @memberof OrderWithCustomerDto
     */
    'items': Array<OrderItemDto>;
    /**
     * 
     * @type {string}
     * @memberof OrderWithCustomerDto
     */
    'paymentStatus': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithCustomerDto
     */
    'orderStatus': string;
    /**
     * 
     * @type {string}
     * @memberof OrderWithCustomerDto
     */
    'serialNumber': string;
    /**
     * 
     * @type {CustomerDto}
     * @memberof OrderWithCustomerDto
     */
    'customer': CustomerDto;
}
/**
 * 
 * @export
 * @interface PaymentDto
 */
export interface PaymentDto {
    /**
     * 
     * @type {string}
     * @memberof PaymentDto
     */
    'clientSecret': string;
}
/**
 * 
 * @export
 * @interface RemoveFromCartDto
 */
export interface RemoveFromCartDto {
    /**
     * 
     * @type {string}
     * @memberof RemoveFromCartDto
     */
    'ticketId': string;
    /**
     * 
     * @type {number}
     * @memberof RemoveFromCartDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface TicketDto
 */
export interface TicketDto {
    /**
     * 
     * @type {string}
     * @memberof TicketDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TicketDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TicketDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof TicketDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof TicketDto
     */
    'validFrom': string;
    /**
     * 
     * @type {string}
     * @memberof TicketDto
     */
    'validTo': string;
    /**
     * 
     * @type {string}
     * @memberof TicketDto
     */
    'experienceId': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomerDto
 */
export interface UpdateCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface UpdateExperienceDto
 */
export interface UpdateExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'bannerImage'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMerchantDto
 */
export interface UpdateMerchantDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMerchantDto
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTicketDto
 */
export interface UpdateTicketDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateTicketDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTicketDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTicketDto
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTicketDto
     */
    'validFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTicketDto
     */
    'validTo'?: string;
}
/**
 * 
 * @export
 * @interface ValidationRequestDto
 */
export interface ValidationRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ValidationRequestDto
     */
    'ticketSerialNumber': string;
}
/**
 * 
 * @export
 * @interface ValidationResponseDto
 */
export interface ValidationResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof ValidationResponseDto
     */
    'isValid': boolean;
    /**
     * 
     * @type {DeepOrderItemDto}
     * @memberof ValidationResponseDto
     */
    'orderItem': DeepOrderItemDto;
    /**
     * 
     * @type {CustomerDto}
     * @memberof ValidationResponseDto
     */
    'customer': CustomerDto;
    /**
     * 
     * @type {string}
     * @memberof ValidationResponseDto
     */
    'message': string;
}

/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerUploadFile: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/asset/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetControllerUploadFile(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetControllerUploadFile(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetApiFp(configuration)
    return {
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerUploadFile(file?: File, options?: any): AxiosPromise<string> {
            return localVarFp.assetControllerUploadFile(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
    /**
     * 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetApi
     */
    public assetControllerUploadFile(file?: File, options?: AxiosRequestConfig) {
        return AssetApiFp(this.configuration).assetControllerUploadFile(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddToCartDto} addToCartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddItemToCartByUser: async (addToCartDto: AddToCartDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addToCartDto' is not null or undefined
            assertParamExists('cartControllerAddItemToCartByUser', 'addToCartDto', addToCartDto)
            const localVarPath = `/cart/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addToCartDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerCheckoutForMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart/me/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartForMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RemoveFromCartDto} removeFromCartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveItemFromCartByUser: async (removeFromCartDto: RemoveFromCartDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeFromCartDto' is not null or undefined
            assertParamExists('cartControllerRemoveItemFromCartByUser', 'removeFromCartDto', removeFromCartDto)
            const localVarPath = `/cart/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeFromCartDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddToCartDto} addToCartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddItemToCartByUser(addToCartDto: AddToCartDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddItemToCartByUser(addToCartDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerCheckoutForMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerCheckoutForMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetCartForMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetCartForMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RemoveFromCartDto} removeFromCartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerRemoveItemFromCartByUser(removeFromCartDto: RemoveFromCartDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerRemoveItemFromCartByUser(removeFromCartDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @param {AddToCartDto} addToCartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddItemToCartByUser(addToCartDto: AddToCartDto, options?: any): AxiosPromise<CartDto> {
            return localVarFp.cartControllerAddItemToCartByUser(addToCartDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerCheckoutForMe(options?: any): AxiosPromise<string> {
            return localVarFp.cartControllerCheckoutForMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartForMe(options?: any): AxiosPromise<CartDto> {
            return localVarFp.cartControllerGetCartForMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RemoveFromCartDto} removeFromCartDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveItemFromCartByUser(removeFromCartDto: RemoveFromCartDto, options?: any): AxiosPromise<CartDto> {
            return localVarFp.cartControllerRemoveItemFromCartByUser(removeFromCartDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @param {AddToCartDto} addToCartDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerAddItemToCartByUser(addToCartDto: AddToCartDto, options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddItemToCartByUser(addToCartDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerCheckoutForMe(options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerCheckoutForMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerGetCartForMe(options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetCartForMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RemoveFromCartDto} removeFromCartDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerRemoveItemFromCartByUser(removeFromCartDto: RemoveFromCartDto, options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerRemoveItemFromCartByUser(removeFromCartDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetPermissions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerRegisterCustomer: async (createCustomerDto: CreateCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCustomerDto' is not null or undefined
            assertParamExists('customerControllerRegisterCustomer', 'createCustomerDto', createCustomerDto)
            const localVarPath = `/customer/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerGetMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerGetMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerGetPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerGetPermissions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerRegisterCustomer(createCustomerDto: CreateCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerRegisterCustomer(createCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetMe(options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.customerControllerGetMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetPermissions(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.customerControllerGetPermissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerRegisterCustomer(createCustomerDto: CreateCustomerDto, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.customerControllerRegisterCustomer(createCustomerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerControllerGetMe(options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerControllerGetMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerControllerGetPermissions(options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerControllerGetPermissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCustomerDto} createCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerControllerRegisterCustomer(createCustomerDto: CreateCustomerDto, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerControllerRegisterCustomer(createCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerAdminApi - axios parameter creator
 * @export
 */
export const CustomerAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerCreateCustomer: async (createCustomerDto: CreateCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCustomerDto' is not null or undefined
            assertParamExists('customerAdminControllerCreateCustomer', 'createCustomerDto', createCustomerDto)
            const localVarPath = `/admin/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerDeleteCustomer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerAdminControllerDeleteCustomer', 'id', id)
            const localVarPath = `/admin/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerGetCustomerById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerAdminControllerGetCustomerById', 'id', id)
            const localVarPath = `/admin/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerGetCustomers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerUpdateCustomer: async (id: string, updateCustomerDto: UpdateCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerAdminControllerUpdateCustomer', 'id', id)
            // verify required parameter 'updateCustomerDto' is not null or undefined
            assertParamExists('customerAdminControllerUpdateCustomer', 'updateCustomerDto', updateCustomerDto)
            const localVarPath = `/admin/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerAdminApi - functional programming interface
 * @export
 */
export const CustomerAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAdminControllerCreateCustomer(createCustomerDto: CreateCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAdminControllerCreateCustomer(createCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAdminControllerDeleteCustomer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAdminControllerDeleteCustomer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAdminControllerGetCustomerById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAdminControllerGetCustomerById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAdminControllerGetCustomers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAdminControllerGetCustomers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerAdminControllerUpdateCustomer(id: string, updateCustomerDto: UpdateCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerAdminControllerUpdateCustomer(id, updateCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerAdminApi - factory interface
 * @export
 */
export const CustomerAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerAdminApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerCreateCustomer(createCustomerDto: CreateCustomerDto, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.customerAdminControllerCreateCustomer(createCustomerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerDeleteCustomer(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.customerAdminControllerDeleteCustomer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerGetCustomerById(id: string, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.customerAdminControllerGetCustomerById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerGetCustomers(options?: any): AxiosPromise<Array<CustomerDto>> {
            return localVarFp.customerAdminControllerGetCustomers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerAdminControllerUpdateCustomer(id: string, updateCustomerDto: UpdateCustomerDto, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.customerAdminControllerUpdateCustomer(id, updateCustomerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerAdminApi - object-oriented interface
 * @export
 * @class CustomerAdminApi
 * @extends {BaseAPI}
 */
export class CustomerAdminApi extends BaseAPI {
    /**
     * 
     * @param {CreateCustomerDto} createCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAdminApi
     */
    public customerAdminControllerCreateCustomer(createCustomerDto: CreateCustomerDto, options?: AxiosRequestConfig) {
        return CustomerAdminApiFp(this.configuration).customerAdminControllerCreateCustomer(createCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAdminApi
     */
    public customerAdminControllerDeleteCustomer(id: string, options?: AxiosRequestConfig) {
        return CustomerAdminApiFp(this.configuration).customerAdminControllerDeleteCustomer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAdminApi
     */
    public customerAdminControllerGetCustomerById(id: string, options?: AxiosRequestConfig) {
        return CustomerAdminApiFp(this.configuration).customerAdminControllerGetCustomerById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAdminApi
     */
    public customerAdminControllerGetCustomers(options?: AxiosRequestConfig) {
        return CustomerAdminApiFp(this.configuration).customerAdminControllerGetCustomers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCustomerDto} updateCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAdminApi
     */
    public customerAdminControllerUpdateCustomer(id: string, updateCustomerDto: UpdateCustomerDto, options?: AxiosRequestConfig) {
        return CustomerAdminApiFp(this.configuration).customerAdminControllerUpdateCustomer(id, updateCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayControllerGetHealth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gatewayControllerGetHealth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gatewayControllerGetHealth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gatewayControllerGetHealth(options?: any): AxiosPromise<void> {
            return localVarFp.gatewayControllerGetHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gatewayControllerGetHealth(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).gatewayControllerGetHealth(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperienceApi - axios parameter creator
 * @export
 */
export const ExperienceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceControllerGetExperienceById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceControllerGetExperienceById', 'id', id)
            const localVarPath = `/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceControllerGetExperiences: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experience`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperienceApi - functional programming interface
 * @export
 */
export const ExperienceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperienceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceControllerGetExperienceById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceControllerGetExperienceById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceControllerGetExperiences(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceControllerGetExperiences(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperienceApi - factory interface
 * @export
 */
export const ExperienceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperienceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceControllerGetExperienceById(id: string, options?: any): AxiosPromise<DeepExperienceDto> {
            return localVarFp.experienceControllerGetExperienceById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceControllerGetExperiences(options?: any): AxiosPromise<Array<ExperienceDto>> {
            return localVarFp.experienceControllerGetExperiences(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperienceApi - object-oriented interface
 * @export
 * @class ExperienceApi
 * @extends {BaseAPI}
 */
export class ExperienceApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public experienceControllerGetExperienceById(id: string, options?: AxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).experienceControllerGetExperienceById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceApi
     */
    public experienceControllerGetExperiences(options?: AxiosRequestConfig) {
        return ExperienceApiFp(this.configuration).experienceControllerGetExperiences(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperienceAdminApi - axios parameter creator
 * @export
 */
export const ExperienceAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerDeleteExperience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceAdminControllerDeleteExperience', 'id', id)
            const localVarPath = `/admin/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerGetExperienceById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceAdminControllerGetExperienceById', 'id', id)
            const localVarPath = `/admin/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerGetExperiences: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/experience`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerUpdateExperience: async (id: string, updateExperienceDto: UpdateExperienceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceAdminControllerUpdateExperience', 'id', id)
            // verify required parameter 'updateExperienceDto' is not null or undefined
            assertParamExists('experienceAdminControllerUpdateExperience', 'updateExperienceDto', updateExperienceDto)
            const localVarPath = `/admin/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperienceAdminApi - functional programming interface
 * @export
 */
export const ExperienceAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperienceAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceAdminControllerDeleteExperience(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceAdminControllerDeleteExperience(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceAdminControllerGetExperienceById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceAdminControllerGetExperienceById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceAdminControllerGetExperiences(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceAdminControllerGetExperiences(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceAdminControllerUpdateExperience(id: string, updateExperienceDto: UpdateExperienceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceAdminControllerUpdateExperience(id, updateExperienceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperienceAdminApi - factory interface
 * @export
 */
export const ExperienceAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperienceAdminApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerDeleteExperience(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.experienceAdminControllerDeleteExperience(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerGetExperienceById(id: string, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experienceAdminControllerGetExperienceById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerGetExperiences(options?: any): AxiosPromise<Array<ExperienceDto>> {
            return localVarFp.experienceAdminControllerGetExperiences(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceAdminControllerUpdateExperience(id: string, updateExperienceDto: UpdateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experienceAdminControllerUpdateExperience(id, updateExperienceDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperienceAdminApi - object-oriented interface
 * @export
 * @class ExperienceAdminApi
 * @extends {BaseAPI}
 */
export class ExperienceAdminApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceAdminApi
     */
    public experienceAdminControllerDeleteExperience(id: string, options?: AxiosRequestConfig) {
        return ExperienceAdminApiFp(this.configuration).experienceAdminControllerDeleteExperience(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceAdminApi
     */
    public experienceAdminControllerGetExperienceById(id: string, options?: AxiosRequestConfig) {
        return ExperienceAdminApiFp(this.configuration).experienceAdminControllerGetExperienceById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceAdminApi
     */
    public experienceAdminControllerGetExperiences(options?: AxiosRequestConfig) {
        return ExperienceAdminApiFp(this.configuration).experienceAdminControllerGetExperiences(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateExperienceDto} updateExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceAdminApi
     */
    public experienceAdminControllerUpdateExperience(id: string, updateExperienceDto: UpdateExperienceDto, options?: AxiosRequestConfig) {
        return ExperienceAdminApiFp(this.configuration).experienceAdminControllerUpdateExperience(id, updateExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperienceMerchantApi - axios parameter creator
 * @export
 */
export const ExperienceMerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExperienceDto} createExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerCreateExperience: async (createExperienceDto: CreateExperienceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExperienceDto' is not null or undefined
            assertParamExists('experienceMerchantControllerCreateExperience', 'createExperienceDto', createExperienceDto)
            const localVarPath = `/merchant-admin/experience`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerDeleteExperience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceMerchantControllerDeleteExperience', 'id', id)
            const localVarPath = `/merchant-admin/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerGetExperienceById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceMerchantControllerGetExperienceById', 'id', id)
            const localVarPath = `/merchant-admin/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerGetExperiences: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchant-admin/experience`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerUpdateExperience: async (id: string, updateExperienceDto: UpdateExperienceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceMerchantControllerUpdateExperience', 'id', id)
            // verify required parameter 'updateExperienceDto' is not null or undefined
            assertParamExists('experienceMerchantControllerUpdateExperience', 'updateExperienceDto', updateExperienceDto)
            const localVarPath = `/merchant-admin/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ValidationRequestDto} validationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerValidateExperiencePass: async (id: string, validationRequestDto: ValidationRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experienceMerchantControllerValidateExperiencePass', 'id', id)
            // verify required parameter 'validationRequestDto' is not null or undefined
            assertParamExists('experienceMerchantControllerValidateExperiencePass', 'validationRequestDto', validationRequestDto)
            const localVarPath = `/merchant-admin/experience/{id}/validate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperienceMerchantApi - functional programming interface
 * @export
 */
export const ExperienceMerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperienceMerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExperienceDto} createExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceMerchantControllerCreateExperience(createExperienceDto: CreateExperienceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceMerchantControllerCreateExperience(createExperienceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceMerchantControllerDeleteExperience(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceMerchantControllerDeleteExperience(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceMerchantControllerGetExperienceById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceMerchantControllerGetExperienceById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceMerchantControllerGetExperiences(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceMerchantControllerGetExperiences(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceMerchantControllerUpdateExperience(id: string, updateExperienceDto: UpdateExperienceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceMerchantControllerUpdateExperience(id, updateExperienceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ValidationRequestDto} validationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experienceMerchantControllerValidateExperiencePass(id: string, validationRequestDto: ValidationRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experienceMerchantControllerValidateExperiencePass(id, validationRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperienceMerchantApi - factory interface
 * @export
 */
export const ExperienceMerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperienceMerchantApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExperienceDto} createExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerCreateExperience(createExperienceDto: CreateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experienceMerchantControllerCreateExperience(createExperienceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerDeleteExperience(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.experienceMerchantControllerDeleteExperience(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerGetExperienceById(id: string, options?: any): AxiosPromise<DeepExperienceDto> {
            return localVarFp.experienceMerchantControllerGetExperienceById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerGetExperiences(options?: any): AxiosPromise<Array<ExperienceDto>> {
            return localVarFp.experienceMerchantControllerGetExperiences(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerUpdateExperience(id: string, updateExperienceDto: UpdateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experienceMerchantControllerUpdateExperience(id, updateExperienceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ValidationRequestDto} validationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experienceMerchantControllerValidateExperiencePass(id: string, validationRequestDto: ValidationRequestDto, options?: any): AxiosPromise<ValidationResponseDto> {
            return localVarFp.experienceMerchantControllerValidateExperiencePass(id, validationRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperienceMerchantApi - object-oriented interface
 * @export
 * @class ExperienceMerchantApi
 * @extends {BaseAPI}
 */
export class ExperienceMerchantApi extends BaseAPI {
    /**
     * 
     * @param {CreateExperienceDto} createExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceMerchantApi
     */
    public experienceMerchantControllerCreateExperience(createExperienceDto: CreateExperienceDto, options?: AxiosRequestConfig) {
        return ExperienceMerchantApiFp(this.configuration).experienceMerchantControllerCreateExperience(createExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceMerchantApi
     */
    public experienceMerchantControllerDeleteExperience(id: string, options?: AxiosRequestConfig) {
        return ExperienceMerchantApiFp(this.configuration).experienceMerchantControllerDeleteExperience(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceMerchantApi
     */
    public experienceMerchantControllerGetExperienceById(id: string, options?: AxiosRequestConfig) {
        return ExperienceMerchantApiFp(this.configuration).experienceMerchantControllerGetExperienceById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceMerchantApi
     */
    public experienceMerchantControllerGetExperiences(options?: AxiosRequestConfig) {
        return ExperienceMerchantApiFp(this.configuration).experienceMerchantControllerGetExperiences(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateExperienceDto} updateExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceMerchantApi
     */
    public experienceMerchantControllerUpdateExperience(id: string, updateExperienceDto: UpdateExperienceDto, options?: AxiosRequestConfig) {
        return ExperienceMerchantApiFp(this.configuration).experienceMerchantControllerUpdateExperience(id, updateExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {ValidationRequestDto} validationRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceMerchantApi
     */
    public experienceMerchantControllerValidateExperiencePass(id: string, validationRequestDto: ValidationRequestDto, options?: AxiosRequestConfig) {
        return ExperienceMerchantApiFp(this.configuration).experienceMerchantControllerValidateExperiencePass(id, validationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MerchantApi - axios parameter creator
 * @export
 */
export const MerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerGetMerchant', 'id', id)
            const localVarPath = `/merchant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMerchantDto} createMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerRegisterMerchant: async (createMerchantDto: CreateMerchantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMerchantDto' is not null or undefined
            assertParamExists('merchantControllerRegisterMerchant', 'createMerchantDto', createMerchantDto)
            const localVarPath = `/merchant/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMerchantDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApi - functional programming interface
 * @export
 */
export const MerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetMerchant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetMerchant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMerchantDto} createMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerRegisterMerchant(createMerchantDto: CreateMerchantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerRegisterMerchant(createMerchantDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantApi - factory interface
 * @export
 */
export const MerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchant(id: string, options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantControllerGetMerchant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMerchantDto} createMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerRegisterMerchant(createMerchantDto: CreateMerchantDto, options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantControllerRegisterMerchant(createMerchantDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MerchantApi - object-oriented interface
 * @export
 * @class MerchantApi
 * @extends {BaseAPI}
 */
export class MerchantApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public merchantControllerGetMerchant(id: string, options?: AxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetMerchant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMerchantDto} createMerchantDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public merchantControllerRegisterMerchant(createMerchantDto: CreateMerchantDto, options?: AxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerRegisterMerchant(createMerchantDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MerchantAdminApi - axios parameter creator
 * @export
 */
export const MerchantAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMerchantDto} createMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerCreateMerchant: async (createMerchantDto: CreateMerchantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMerchantDto' is not null or undefined
            assertParamExists('merchantAdminControllerCreateMerchant', 'createMerchantDto', createMerchantDto)
            const localVarPath = `/admin/merchant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMerchantDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerDeleteMerchant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantAdminControllerDeleteMerchant', 'id', id)
            const localVarPath = `/admin/merchant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerGetMerchant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantAdminControllerGetMerchant', 'id', id)
            const localVarPath = `/admin/merchant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerGetMerchants: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/merchant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMerchantDto} updateMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerUpdateMerchant: async (id: string, updateMerchantDto: UpdateMerchantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantAdminControllerUpdateMerchant', 'id', id)
            // verify required parameter 'updateMerchantDto' is not null or undefined
            assertParamExists('merchantAdminControllerUpdateMerchant', 'updateMerchantDto', updateMerchantDto)
            const localVarPath = `/admin/merchant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMerchantDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantAdminApi - functional programming interface
 * @export
 */
export const MerchantAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMerchantDto} createMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantAdminControllerCreateMerchant(createMerchantDto: CreateMerchantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantAdminControllerCreateMerchant(createMerchantDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantAdminControllerDeleteMerchant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantAdminControllerDeleteMerchant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantAdminControllerGetMerchant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantAdminControllerGetMerchant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantAdminControllerGetMerchants(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MerchantDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantAdminControllerGetMerchants(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMerchantDto} updateMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantAdminControllerUpdateMerchant(id: string, updateMerchantDto: UpdateMerchantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantAdminControllerUpdateMerchant(id, updateMerchantDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantAdminApi - factory interface
 * @export
 */
export const MerchantAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantAdminApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMerchantDto} createMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerCreateMerchant(createMerchantDto: CreateMerchantDto, options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantAdminControllerCreateMerchant(createMerchantDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerDeleteMerchant(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.merchantAdminControllerDeleteMerchant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerGetMerchant(id: string, options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantAdminControllerGetMerchant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerGetMerchants(options?: any): AxiosPromise<Array<MerchantDto>> {
            return localVarFp.merchantAdminControllerGetMerchants(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMerchantDto} updateMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantAdminControllerUpdateMerchant(id: string, updateMerchantDto: UpdateMerchantDto, options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantAdminControllerUpdateMerchant(id, updateMerchantDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MerchantAdminApi - object-oriented interface
 * @export
 * @class MerchantAdminApi
 * @extends {BaseAPI}
 */
export class MerchantAdminApi extends BaseAPI {
    /**
     * 
     * @param {CreateMerchantDto} createMerchantDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantAdminApi
     */
    public merchantAdminControllerCreateMerchant(createMerchantDto: CreateMerchantDto, options?: AxiosRequestConfig) {
        return MerchantAdminApiFp(this.configuration).merchantAdminControllerCreateMerchant(createMerchantDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantAdminApi
     */
    public merchantAdminControllerDeleteMerchant(id: string, options?: AxiosRequestConfig) {
        return MerchantAdminApiFp(this.configuration).merchantAdminControllerDeleteMerchant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantAdminApi
     */
    public merchantAdminControllerGetMerchant(id: string, options?: AxiosRequestConfig) {
        return MerchantAdminApiFp(this.configuration).merchantAdminControllerGetMerchant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantAdminApi
     */
    public merchantAdminControllerGetMerchants(options?: AxiosRequestConfig) {
        return MerchantAdminApiFp(this.configuration).merchantAdminControllerGetMerchants(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateMerchantDto} updateMerchantDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantAdminApi
     */
    public merchantAdminControllerUpdateMerchant(id: string, updateMerchantDto: UpdateMerchantDto, options?: AxiosRequestConfig) {
        return MerchantAdminApiFp(this.configuration).merchantAdminControllerUpdateMerchant(id, updateMerchantDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MerchantSelfApi - axios parameter creator
 * @export
 */
export const MerchantSelfApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantSelfControllerGetMerchantMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchant-admin/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMerchantDto} updateMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantSelfControllerUpdateMerchantMe: async (updateMerchantDto: UpdateMerchantDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMerchantDto' is not null or undefined
            assertParamExists('merchantSelfControllerUpdateMerchantMe', 'updateMerchantDto', updateMerchantDto)
            const localVarPath = `/merchant-admin/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMerchantDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantSelfApi - functional programming interface
 * @export
 */
export const MerchantSelfApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantSelfApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantSelfControllerGetMerchantMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantSelfControllerGetMerchantMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateMerchantDto} updateMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantSelfControllerUpdateMerchantMe(updateMerchantDto: UpdateMerchantDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantSelfControllerUpdateMerchantMe(updateMerchantDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantSelfApi - factory interface
 * @export
 */
export const MerchantSelfApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantSelfApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantSelfControllerGetMerchantMe(options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantSelfControllerGetMerchantMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMerchantDto} updateMerchantDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantSelfControllerUpdateMerchantMe(updateMerchantDto: UpdateMerchantDto, options?: any): AxiosPromise<MerchantDto> {
            return localVarFp.merchantSelfControllerUpdateMerchantMe(updateMerchantDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MerchantSelfApi - object-oriented interface
 * @export
 * @class MerchantSelfApi
 * @extends {BaseAPI}
 */
export class MerchantSelfApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantSelfApi
     */
    public merchantSelfControllerGetMerchantMe(options?: AxiosRequestConfig) {
        return MerchantSelfApiFp(this.configuration).merchantSelfControllerGetMerchantMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateMerchantDto} updateMerchantDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantSelfApi
     */
    public merchantSelfControllerUpdateMerchantMe(updateMerchantDto: UpdateMerchantDto, options?: AxiosRequestConfig) {
        return MerchantSelfApiFp(this.configuration).merchantSelfControllerUpdateMerchantMe(updateMerchantDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetOrder', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrdersByUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrdersByUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrdersByUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrder(id: string, options?: any): AxiosPromise<DeepOrderDto> {
            return localVarFp.orderControllerGetOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrdersByUser(options?: any): AxiosPromise<Array<OrderDto>> {
            return localVarFp.orderControllerGetOrdersByUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerGetOrder(id: string, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerGetOrdersByUser(options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetOrdersByUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderAdminApi - axios parameter creator
 * @export
 */
export const OrderAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerCancelOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderAdminControllerCancelOrder', 'id', id)
            const localVarPath = `/admin/order/cancel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerDeleteOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderAdminControllerDeleteOrder', 'id', id)
            const localVarPath = `/admin/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerFailOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderAdminControllerFailOrder', 'id', id)
            const localVarPath = `/admin/order/fail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerFulfillOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderAdminControllerFulfillOrder', 'id', id)
            const localVarPath = `/admin/order/fulfill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerGetOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderAdminControllerGetOrder', 'id', id)
            const localVarPath = `/admin/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerGetOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderAdminApi - functional programming interface
 * @export
 */
export const OrderAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderAdminControllerCancelOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderAdminControllerCancelOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderAdminControllerDeleteOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderAdminControllerDeleteOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderAdminControllerFailOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderAdminControllerFailOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderAdminControllerFulfillOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderAdminControllerFulfillOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderAdminControllerGetOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepOrderWithCustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderAdminControllerGetOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderAdminControllerGetOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderWithCustomerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderAdminControllerGetOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderAdminApi - factory interface
 * @export
 */
export const OrderAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderAdminApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerCancelOrder(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderAdminControllerCancelOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerDeleteOrder(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderAdminControllerDeleteOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerFailOrder(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderAdminControllerFailOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerFulfillOrder(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderAdminControllerFulfillOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerGetOrder(id: string, options?: any): AxiosPromise<DeepOrderWithCustomerDto> {
            return localVarFp.orderAdminControllerGetOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderAdminControllerGetOrders(options?: any): AxiosPromise<Array<OrderWithCustomerDto>> {
            return localVarFp.orderAdminControllerGetOrders(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderAdminApi - object-oriented interface
 * @export
 * @class OrderAdminApi
 * @extends {BaseAPI}
 */
export class OrderAdminApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderAdminApi
     */
    public orderAdminControllerCancelOrder(id: string, options?: AxiosRequestConfig) {
        return OrderAdminApiFp(this.configuration).orderAdminControllerCancelOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderAdminApi
     */
    public orderAdminControllerDeleteOrder(id: string, options?: AxiosRequestConfig) {
        return OrderAdminApiFp(this.configuration).orderAdminControllerDeleteOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderAdminApi
     */
    public orderAdminControllerFailOrder(id: string, options?: AxiosRequestConfig) {
        return OrderAdminApiFp(this.configuration).orderAdminControllerFailOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderAdminApi
     */
    public orderAdminControllerFulfillOrder(id: string, options?: AxiosRequestConfig) {
        return OrderAdminApiFp(this.configuration).orderAdminControllerFulfillOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderAdminApi
     */
    public orderAdminControllerGetOrder(id: string, options?: AxiosRequestConfig) {
        return OrderAdminApiFp(this.configuration).orderAdminControllerGetOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderAdminApi
     */
    public orderAdminControllerGetOrders(options?: AxiosRequestConfig) {
        return OrderAdminApiFp(this.configuration).orderAdminControllerGetOrders(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderMerchantApi - axios parameter creator
 * @export
 */
export const OrderMerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderMerchantControllerGetOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderMerchantControllerGetOrder', 'id', id)
            const localVarPath = `/merchant-admin/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderMerchantControllerGetOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchant-admin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderMerchantApi - functional programming interface
 * @export
 */
export const OrderMerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderMerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderMerchantControllerGetOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepOrderWithCustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderMerchantControllerGetOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderMerchantControllerGetOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderWithCustomerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderMerchantControllerGetOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderMerchantApi - factory interface
 * @export
 */
export const OrderMerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderMerchantApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderMerchantControllerGetOrder(id: string, options?: any): AxiosPromise<DeepOrderWithCustomerDto> {
            return localVarFp.orderMerchantControllerGetOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderMerchantControllerGetOrders(options?: any): AxiosPromise<Array<OrderWithCustomerDto>> {
            return localVarFp.orderMerchantControllerGetOrders(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderMerchantApi - object-oriented interface
 * @export
 * @class OrderMerchantApi
 * @extends {BaseAPI}
 */
export class OrderMerchantApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderMerchantApi
     */
    public orderMerchantControllerGetOrder(id: string, options?: AxiosRequestConfig) {
        return OrderMerchantApiFp(this.configuration).orderMerchantControllerGetOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderMerchantApi
     */
    public orderMerchantControllerGetOrders(options?: AxiosRequestConfig) {
        return OrderMerchantApiFp(this.configuration).orderMerchantControllerGetOrders(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PassApi - axios parameter creator
 * @export
 */
export const PassApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passControllerGetQrcode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('passControllerGetQrcode', 'id', id)
            const localVarPath = `/pass/qr/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PassApi - functional programming interface
 * @export
 */
export const PassApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PassApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passControllerGetQrcode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passControllerGetQrcode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PassApi - factory interface
 * @export
 */
export const PassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PassApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passControllerGetQrcode(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.passControllerGetQrcode(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PassApi - object-oriented interface
 * @export
 * @class PassApi
 * @extends {BaseAPI}
 */
export class PassApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PassApi
     */
    public passControllerGetQrcode(id: string, options?: AxiosRequestConfig) {
        return PassApiFp(this.configuration).passControllerGetQrcode(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreatePaymentIntent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerCreatePaymentIntent', 'id', id)
            const localVarPath = `/payment/intent/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerHandleWebhook: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payment/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCreatePaymentIntent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCreatePaymentIntent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerHandleWebhook(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerHandleWebhook(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreatePaymentIntent(id: string, options?: any): AxiosPromise<PaymentDto> {
            return localVarFp.paymentControllerCreatePaymentIntent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerHandleWebhook(options?: any): AxiosPromise<void> {
            return localVarFp.paymentControllerHandleWebhook(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public paymentControllerCreatePaymentIntent(id: string, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).paymentControllerCreatePaymentIntent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public paymentControllerHandleWebhook(options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).paymentControllerHandleWebhook(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketApi - axios parameter creator
 * @export
 */
export const TicketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketControllerGetMerchant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketControllerGetMerchant', 'id', id)
            const localVarPath = `/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketControllerGetTicketsForExperience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketControllerGetTicketsForExperience', 'id', id)
            const localVarPath = `/ticket/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketApi - functional programming interface
 * @export
 */
export const TicketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketControllerGetMerchant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepTicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketControllerGetMerchant(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketControllerGetTicketsForExperience(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketControllerGetTicketsForExperience(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketApi - factory interface
 * @export
 */
export const TicketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketControllerGetMerchant(id: string, options?: any): AxiosPromise<DeepTicketDto> {
            return localVarFp.ticketControllerGetMerchant(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketControllerGetTicketsForExperience(id: string, options?: any): AxiosPromise<Array<TicketDto>> {
            return localVarFp.ticketControllerGetTicketsForExperience(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketApi - object-oriented interface
 * @export
 * @class TicketApi
 * @extends {BaseAPI}
 */
export class TicketApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public ticketControllerGetMerchant(id: string, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).ticketControllerGetMerchant(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public ticketControllerGetTicketsForExperience(id: string, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).ticketControllerGetTicketsForExperience(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketAdminApi - axios parameter creator
 * @export
 */
export const TicketAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerDeleteTicket: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketAdminControllerDeleteTicket', 'id', id)
            const localVarPath = `/admin/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerGetTicketById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketAdminControllerGetTicketById', 'id', id)
            const localVarPath = `/admin/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerGetTickets: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerGetTicketsForExperience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketAdminControllerGetTicketsForExperience', 'id', id)
            const localVarPath = `/admin/ticket/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTicketDto} updateTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerUpdateTicket: async (id: string, updateTicketDto: UpdateTicketDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketAdminControllerUpdateTicket', 'id', id)
            // verify required parameter 'updateTicketDto' is not null or undefined
            assertParamExists('ticketAdminControllerUpdateTicket', 'updateTicketDto', updateTicketDto)
            const localVarPath = `/admin/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTicketDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketAdminApi - functional programming interface
 * @export
 */
export const TicketAdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketAdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketAdminControllerDeleteTicket(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketAdminControllerDeleteTicket(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketAdminControllerGetTicketById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepTicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketAdminControllerGetTicketById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketAdminControllerGetTickets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeepTicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketAdminControllerGetTickets(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketAdminControllerGetTicketsForExperience(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketAdminControllerGetTicketsForExperience(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTicketDto} updateTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketAdminControllerUpdateTicket(id: string, updateTicketDto: UpdateTicketDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketAdminControllerUpdateTicket(id, updateTicketDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketAdminApi - factory interface
 * @export
 */
export const TicketAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketAdminApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerDeleteTicket(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.ticketAdminControllerDeleteTicket(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerGetTicketById(id: string, options?: any): AxiosPromise<DeepTicketDto> {
            return localVarFp.ticketAdminControllerGetTicketById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerGetTickets(options?: any): AxiosPromise<Array<DeepTicketDto>> {
            return localVarFp.ticketAdminControllerGetTickets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerGetTicketsForExperience(id: string, options?: any): AxiosPromise<Array<TicketDto>> {
            return localVarFp.ticketAdminControllerGetTicketsForExperience(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTicketDto} updateTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketAdminControllerUpdateTicket(id: string, updateTicketDto: UpdateTicketDto, options?: any): AxiosPromise<TicketDto> {
            return localVarFp.ticketAdminControllerUpdateTicket(id, updateTicketDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketAdminApi - object-oriented interface
 * @export
 * @class TicketAdminApi
 * @extends {BaseAPI}
 */
export class TicketAdminApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketAdminApi
     */
    public ticketAdminControllerDeleteTicket(id: string, options?: AxiosRequestConfig) {
        return TicketAdminApiFp(this.configuration).ticketAdminControllerDeleteTicket(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketAdminApi
     */
    public ticketAdminControllerGetTicketById(id: string, options?: AxiosRequestConfig) {
        return TicketAdminApiFp(this.configuration).ticketAdminControllerGetTicketById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketAdminApi
     */
    public ticketAdminControllerGetTickets(options?: AxiosRequestConfig) {
        return TicketAdminApiFp(this.configuration).ticketAdminControllerGetTickets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketAdminApi
     */
    public ticketAdminControllerGetTicketsForExperience(id: string, options?: AxiosRequestConfig) {
        return TicketAdminApiFp(this.configuration).ticketAdminControllerGetTicketsForExperience(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateTicketDto} updateTicketDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketAdminApi
     */
    public ticketAdminControllerUpdateTicket(id: string, updateTicketDto: UpdateTicketDto, options?: AxiosRequestConfig) {
        return TicketAdminApiFp(this.configuration).ticketAdminControllerUpdateTicket(id, updateTicketDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TicketMerchantApi - axios parameter creator
 * @export
 */
export const TicketMerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerCreateTicket: async (createTicketDto: CreateTicketDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTicketDto' is not null or undefined
            assertParamExists('ticketMerchantControllerCreateTicket', 'createTicketDto', createTicketDto)
            const localVarPath = `/merchant-admin/ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTicketDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerDeleteTicket: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketMerchantControllerDeleteTicket', 'id', id)
            const localVarPath = `/merchant-admin/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerGetTicketById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketMerchantControllerGetTicketById', 'id', id)
            const localVarPath = `/merchant-admin/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerGetTickets: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchant-admin/ticket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerGetTicketsForExperience: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketMerchantControllerGetTicketsForExperience', 'id', id)
            const localVarPath = `/merchant-admin/ticket/experience/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTicketDto} updateTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerUpdateTicket: async (id: string, updateTicketDto: UpdateTicketDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketMerchantControllerUpdateTicket', 'id', id)
            // verify required parameter 'updateTicketDto' is not null or undefined
            assertParamExists('ticketMerchantControllerUpdateTicket', 'updateTicketDto', updateTicketDto)
            const localVarPath = `/merchant-admin/ticket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTicketDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketMerchantApi - functional programming interface
 * @export
 */
export const TicketMerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketMerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketMerchantControllerCreateTicket(createTicketDto: CreateTicketDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketMerchantControllerCreateTicket(createTicketDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketMerchantControllerDeleteTicket(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketMerchantControllerDeleteTicket(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketMerchantControllerGetTicketById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepTicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketMerchantControllerGetTicketById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketMerchantControllerGetTickets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeepTicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketMerchantControllerGetTickets(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketMerchantControllerGetTicketsForExperience(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketMerchantControllerGetTicketsForExperience(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTicketDto} updateTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketMerchantControllerUpdateTicket(id: string, updateTicketDto: UpdateTicketDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketMerchantControllerUpdateTicket(id, updateTicketDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketMerchantApi - factory interface
 * @export
 */
export const TicketMerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketMerchantApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerCreateTicket(createTicketDto: CreateTicketDto, options?: any): AxiosPromise<TicketDto> {
            return localVarFp.ticketMerchantControllerCreateTicket(createTicketDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerDeleteTicket(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.ticketMerchantControllerDeleteTicket(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerGetTicketById(id: string, options?: any): AxiosPromise<DeepTicketDto> {
            return localVarFp.ticketMerchantControllerGetTicketById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerGetTickets(options?: any): AxiosPromise<Array<DeepTicketDto>> {
            return localVarFp.ticketMerchantControllerGetTickets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerGetTicketsForExperience(id: string, options?: any): AxiosPromise<Array<TicketDto>> {
            return localVarFp.ticketMerchantControllerGetTicketsForExperience(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTicketDto} updateTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketMerchantControllerUpdateTicket(id: string, updateTicketDto: UpdateTicketDto, options?: any): AxiosPromise<TicketDto> {
            return localVarFp.ticketMerchantControllerUpdateTicket(id, updateTicketDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TicketMerchantApi - object-oriented interface
 * @export
 * @class TicketMerchantApi
 * @extends {BaseAPI}
 */
export class TicketMerchantApi extends BaseAPI {
    /**
     * 
     * @param {CreateTicketDto} createTicketDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMerchantApi
     */
    public ticketMerchantControllerCreateTicket(createTicketDto: CreateTicketDto, options?: AxiosRequestConfig) {
        return TicketMerchantApiFp(this.configuration).ticketMerchantControllerCreateTicket(createTicketDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMerchantApi
     */
    public ticketMerchantControllerDeleteTicket(id: string, options?: AxiosRequestConfig) {
        return TicketMerchantApiFp(this.configuration).ticketMerchantControllerDeleteTicket(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMerchantApi
     */
    public ticketMerchantControllerGetTicketById(id: string, options?: AxiosRequestConfig) {
        return TicketMerchantApiFp(this.configuration).ticketMerchantControllerGetTicketById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMerchantApi
     */
    public ticketMerchantControllerGetTickets(options?: AxiosRequestConfig) {
        return TicketMerchantApiFp(this.configuration).ticketMerchantControllerGetTickets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMerchantApi
     */
    public ticketMerchantControllerGetTicketsForExperience(id: string, options?: AxiosRequestConfig) {
        return TicketMerchantApiFp(this.configuration).ticketMerchantControllerGetTicketsForExperience(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateTicketDto} updateTicketDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketMerchantApi
     */
    public ticketMerchantControllerUpdateTicket(id: string, updateTicketDto: UpdateTicketDto, options?: AxiosRequestConfig) {
        return TicketMerchantApiFp(this.configuration).ticketMerchantControllerUpdateTicket(id, updateTicketDto, options).then((request) => request(this.axios, this.basePath));
    }
}



